package com.atscale.java.xmla.cases;

import com.atscale.java.dao.QueryHistoryDto;
import com.atscale.java.utils.CsvLoaderUtil;
import com.atscale.java.utils.PropertiesManager;
import com.atscale.java.utils.QueryHistoryFileUtil;
import io.gatling.javaapi.http.HttpRequestActionBuilder;
import static io.gatling.javaapi.core.CoreDsl.*;
import static io.gatling.javaapi.http.HttpDsl.*;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("unused")
public class AtScaleDynamicXmlaActions {
    private static final Logger LOGGER = LoggerFactory.getLogger(AtScaleDynamicXmlaActions.class);

    public AtScaleDynamicXmlaActions() {
        super();
    }

    private List<NamedHttpRequestActionBuilder> createXmlaPayloads(List<QueryHistoryDto> history, String cubeName, String catalog) {
        List<NamedHttpRequestActionBuilder> builders = new ArrayList<>();
        for (QueryHistoryDto query : history) {
                String queryName = query.getQueryName();
                String inboundTextAsMd5Hash = query.getInboundTextAsMd5Hash();
                String body = injectXmlaQuery(query.getInboundText(), cubeName, catalog);
                builders.add(new NamedHttpRequestActionBuilder(httpRequest(queryName, body), queryName, inboundTextAsMd5Hash, body));
                LOGGER.debug("Created XMLA payload for query: {} hash: {} and body {}", queryName, query.getInboundTextAsMd5Hash(), body);
            }
            return builders;
    }

    public NamedHttpRequestActionBuilder[] createPayloadsIngestedXmlaQueries(String model, String cubeName, String catalog, String ingestionFileName, boolean hasHeader) {
        CsvLoaderUtil csvLoader = new CsvLoaderUtil(ingestionFileName, hasHeader);

        List<QueryHistoryDto> history = csvLoader.loadQueriesFromCsv();
        if (history.isEmpty()) {
            throw new IllegalArgumentException(String.format("No queries found in the history file: %s", csvLoader.getFilePath()));
        }

        List<NamedHttpRequestActionBuilder> builders = createXmlaPayloads(history, cubeName, catalog);
        return builders.toArray(new NamedHttpRequestActionBuilder[0]);
    }

    public NamedHttpRequestActionBuilder[] createPayloadsXmlaQueries(String model, String cubeName, String catalog) {
        String filePath = QueryHistoryFileUtil.getXmlaFilePath(model);
        try {
            List<QueryHistoryDto> history = QueryHistoryFileUtil.readQueryHistoryFromFile(filePath);
            if (history.isEmpty()) {
                throw new IllegalArgumentException(String.format("No queries found in the history file: %s", filePath));
            }

            List<NamedHttpRequestActionBuilder> builders = createXmlaPayloads(history, cubeName, catalog);
            return builders.toArray(new NamedHttpRequestActionBuilder[0]);
        } catch(FileNotFoundException e) {
            throw new RuntimeException(String.format("Query history file not found: %s.  It should be generated by running the QueryExtractExecutor. See README.md for instructions", filePath), e);
        } catch(IOException e) {
            throw new RuntimeException("Error reading query history file: " + filePath, e);
        }
    }

    private HttpRequestActionBuilder httpRequest(String queryName, String body) {
        return http(queryName)
                .post("")
                .body(StringBody(body)).asXml()
                .requestTimeout(java.time.Duration.ofSeconds(120))
                .check(
                        status().saveAs("responseStatus"),
                        status().is(200),
                        bodyString().saveAs("responseBody")
                );
    }

    private String injectXmlaQuery(String queryBody, String cube, String catalog) {
        queryBody = org.apache.commons.text.StringEscapeUtils.escapeXml11(queryBody);
        return String.format("""
                <Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/">
                    <Body>
                        <Execute xmlns="urn:schemas-microsoft-com:xml-analysis">
                            <Command>
                                <Statement>%s</Statement>
                            </Command>
                            <Properties>
                                <PropertyList>
                                    <Cube>%s</Cube>
                                    <Catalog>%s</Catalog>
                                    <UseAggregates>%s</UseAggregates>
                                    <GenerateAggregates>%s</GenerateAggregates>
                                    <UseQueryCache>%s</UseQueryCache>
                                    <UseAggregateCache>%s</UseAggregateCache>
                                </PropertyList>
                            </Properties>
                        </Execute>
                    </Body>
                </Envelope>
                """, queryBody, cube, catalog, PropertiesManager.getXmlaUseAggregates(),
                PropertiesManager.getXmlaGenerateAggregates(),
                PropertiesManager.getXmlaUseQueryCache(),
                PropertiesManager.getXmlaUseAggregateCache());
    }
}

