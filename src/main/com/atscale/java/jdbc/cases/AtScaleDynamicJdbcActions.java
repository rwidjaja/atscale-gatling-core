package com.atscale.java.jdbc.cases;

import com.atscale.java.utils.CsvLoaderUtil;
import org.galaxio.gatling.javaapi.actions.QueryActionBuilder;
import org.galaxio.gatling.javaapi.check.simpleCheckType;
import com.atscale.java.utils.QueryHistoryFileUtil;
import com.atscale.java.dao.QueryHistoryDto;
import static org.galaxio.gatling.javaapi.JdbcDsl.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class AtScaleDynamicJdbcActions {

    private AtScaleDynamicJdbcActions() {
        // Prevent instantiation
    }

    private static List<NamedQueryActionBuilder> createBuildersJdbc(List<QueryHistoryDto> history) {
        List<NamedQueryActionBuilder> builders = new ArrayList<>();

        for (QueryHistoryDto query : history) {
            String queryName = query.getQueryName();
            String inboundTextAsMd5Hash = query.getInboundTextAsMd5Hash();
            QueryActionBuilder builder = jdbc(queryName)
                .query(query.getInboundText())
                .check(
                    simpleCheck(simpleCheckType.NonEmpty),
                    allResults().saveAs("queryResultSet")
                );
            builders.add(new NamedQueryActionBuilder(builder, queryName, inboundTextAsMd5Hash));
        }
        return builders;

    }

    public static NamedQueryActionBuilder[] createBuildersJdbcQueries(String model) {
        String filePath = QueryHistoryFileUtil.getJdbcFilePath(model);
        List<NamedQueryActionBuilder> builders = new ArrayList<>();
        try {
            List<QueryHistoryDto> history = QueryHistoryFileUtil.readQueryHistoryFromFile(filePath);
            if (history.isEmpty()) {
                throw new IllegalArgumentException(String.format("No queries found in the history file: %s", filePath));
            }
            builders = createBuildersJdbc(history);

        } catch(FileNotFoundException e) {
            throw new RuntimeException(String.format("Query history file not found: %s.  It should be generated by running the QueryExtractExecutor. See README.md for instructions", filePath), e);
        } catch(IOException e) {
            throw new RuntimeException("Error reading query history file: " + filePath, e);
        }
        return builders.toArray(new NamedQueryActionBuilder[0]);
    }

    public static NamedQueryActionBuilder[] createBuildersIngestedQueries(String ingestionFileName, boolean hasHeader) {
        List<NamedQueryActionBuilder> builders = new ArrayList<>();
        CsvLoaderUtil csvLoader = new CsvLoaderUtil(ingestionFileName, hasHeader);

        List<QueryHistoryDto> history = csvLoader.loadQueriesFromCsv();
        if (history.isEmpty()) {
            throw new IllegalArgumentException(String.format("No queries found in the history file: %s",csvLoader.getFilePath().toString() ));
        }
        builders = createBuildersJdbc(history);


        return builders.toArray(new NamedQueryActionBuilder[0]);
    }
}

